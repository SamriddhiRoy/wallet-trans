{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samri\\\\wallet trans\\\\wallet\\\\src\\\\components\\\\Graph.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n// import { mockInflowOutflowData } from \"../data/mockData\";\n\n// const Graph = ({ nodes, links }) => {\n//   const svgRef = useRef();\n\n//   useEffect(() => {\n//     const svg = d3.select(svgRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 1200;\n//     const height = 800;\n\n//     const simulation = d3.forceSimulation(nodes)\n//       .force(\"link\", d3.forceLink(links).id(d => d.id).distance(240))\n//       .force(\"charge\", d3.forceManyBody().strength(-400))\n//       .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n//     svg.append(\"defs\").append(\"marker\")\n//       .attr(\"id\", \"arrow\")\n//       .attr(\"viewBox\", \"0 -5 10 10\")\n//       .attr(\"refX\", 36)\n//       .attr(\"refY\", 0)\n//       .attr(\"markerWidth\", 6)\n//       .attr(\"markerHeight\", 6)\n//       .attr(\"orient\", \"auto\")\n//       .append(\"path\")\n//       .attr(\"d\", \"M0,-5L10,0L0,5\")\n//       .attr(\"fill\", \"#00f2ff\");\n\n//     const link = svg.append(\"g\")\n//       .attr(\"stroke\", \"#888\")\n//       .selectAll(\"line\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"stroke-width\", 2.5)\n//       .attr(\"stroke\", d => parseFloat(d.amount) > 1 ? \"#00f2ff\" : \"#ff00a1\")\n//       .attr(\"stroke-dasharray\", d => parseFloat(d.amount) > 1 ? \"5,3\" : \"4,3\")\n//       .attr(\"marker-end\", \"url(#arrow)\");\n\n//     const node = svg.append(\"g\")\n//       .selectAll(\"foreignObject\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"foreignObject\")\n//       .attr(\"width\", 180)\n//       .attr(\"height\", 100)\n//       .attr(\"x\", -90)\n//       .attr(\"y\", -50)\n//       .html(d => {\n//         const label = d.label || `${d.id.slice(0, 6)}...${d.id.slice(-6)}`;\n\n//         let amount = \"No Data\";\n//         let date = \"No Data\";\n\n//         // const inflows = mockInflowOutflowData[d.id]?.inflows || [];\n//         // const outflows = mockInflowOutflowData[d.id]?.outflows || [];\n\n//         // if (inflows.length > 0) {\n//         //   amount = `${inflows[0].amount} BTC`;\n//         //   date = inflows[0].date;\n//         // } else if (outflows.length > 0) {\n//         //   amount = `${outflows[0].amount} BTC`;\n//         //   date = outflows[0].date;\n//         // }\n\n//         let inflows = mockInflowOutflowData[d.id]?.inflows || [];\n// let outflows = mockInflowOutflowData[d.id]?.outflows || [];\n\n// if (inflows.length === 0 && outflows.length === 0) {\n//   // Look into every nodeâ€™s inflows/outflows to find a match\n//   for (const key in mockInflowOutflowData) {\n//     const entry = mockInflowOutflowData[key];\n\n//     const inflowMatch = entry.inflows?.find(tx => tx.sender === d.id);\n//     const outflowMatch = entry.outflows?.find(tx => tx.beneficiary_address === d.id);\n\n//     if (inflowMatch) {\n//       amount = `${inflowMatch.amount} BTC`;\n//       date = inflowMatch.date;\n//       break;\n//     } else if (outflowMatch) {\n//       amount = `${outflowMatch.amount} BTC`;\n//       date = outflowMatch.date;\n//       break;\n//     }\n//   }\n// } else if (inflows.length > 0) {\n//   amount = `${inflows[0].amount} BTC`;\n//   date = inflows[0].date;\n// } else if (outflows.length > 0) {\n//   amount = `${outflows[0].amount} BTC`;\n//   date = outflows[0].date;\n// }\n\n//         const bgColor = d.label === \"Changenow\" ? \"#ff8800\" :\n//                         d.label === \"Whitebit\"  ? \"#b794f4\" :\n//                         d.label                 ? \"#ffb6c1\" :\n//                                                   \"#38b2ac\";\n\n//         return `\n//           <div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"\n//             background: ${bgColor};\n//             border-radius: 25px;\n//             padding: 6px 10px;\n//             color: white;\n//             text-align: center;\n//             font-size: 13px;\n//             font-weight: 500;\n//             box-shadow: 0 0 8px rgba(255,255,255,0.5);\n//             cursor: pointer;\n//             margin-bottom: 5px;\n//           \">${label}</div>\n//           <div style=\"display: flex; justify-content: space-between; margin-top: 5px;\">\n//             <div style=\"\n//               background-color: #333;\n//               color: white;\n//               padding: 5px 10px;\n//               border-radius: 12px;\n//               font-size: 10px;\n//               font-weight: 600;\n//             \">${amount} | ${date}</div>\n//             <div style=\"\n//               background-color: #333;\n//               color: white;\n//               padding: 5px 10px;\n//               border-radius: 12px;\n//               font-size: 10px;\n//               font-weight: 600;\n//             \">${d.id}</div>\n//           </div>\n//         `;\n//       });\n\n//     simulation.on(\"tick\", () => {\n//       link\n//         .attr(\"x1\", d => d.source.x)\n//         .attr(\"y1\", d => d.source.y)\n//         .attr(\"x2\", d => d.target.x)\n//         .attr(\"y2\", d => d.target.y);\n\n//       node\n//         .attr(\"x\", d => d.x - 90)\n//         .attr(\"y\", d => d.y - 50);\n//     });\n\n//   }, [nodes, links]);\n\n//   return (\n//     <svg\n//       ref={svgRef}\n//       width={1200}\n//       height={800}\n//       style={{\n//         backgroundColor: \"#000\",\n//         backgroundImage: \"url('/graph-bg.png')\",\n//         backgroundSize: \"contain\",\n//         backgroundRepeat: \"no-repeat\",\n//         backgroundPosition: \"center\"\n//       }}\n//     ></svg>\n//   );\n// };\n\n// export default Graph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  nodes,\n  links\n}) => {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 1200;\n    const height = 800;\n    const inflowLinks = links.filter(link => {\n      var _nodes$, _link$target, _nodes$2;\n      return link.target === ((_nodes$ = nodes[0]) === null || _nodes$ === void 0 ? void 0 : _nodes$.id) || ((_link$target = link.target) === null || _link$target === void 0 ? void 0 : _link$target.id) === ((_nodes$2 = nodes[0]) === null || _nodes$2 === void 0 ? void 0 : _nodes$2.id);\n    });\n    const outflowLinks = links.filter(link => {\n      var _nodes$3, _link$source, _nodes$4;\n      return link.source === ((_nodes$3 = nodes[0]) === null || _nodes$3 === void 0 ? void 0 : _nodes$3.id) || ((_link$source = link.source) === null || _link$source === void 0 ? void 0 : _link$source.id) === ((_nodes$4 = nodes[0]) === null || _nodes$4 === void 0 ? void 0 : _nodes$4.id);\n    });\n    const centerNode = nodes[0];\n    const directedLinks = links.map(link => {\n      var _link$source2, _link$target2;\n      const sourceId = typeof link.source === \"string\" ? link.source : (_link$source2 = link.source) === null || _link$source2 === void 0 ? void 0 : _link$source2.id;\n      const targetId = typeof link.target === \"string\" ? link.target : (_link$target2 = link.target) === null || _link$target2 === void 0 ? void 0 : _link$target2.id;\n      if (sourceId === (centerNode === null || centerNode === void 0 ? void 0 : centerNode.id)) {\n        return {\n          ...link,\n          source: sourceId,\n          target: targetId\n        };\n      } else if (targetId === (centerNode === null || centerNode === void 0 ? void 0 : centerNode.id)) {\n        return {\n          ...link,\n          source: centerNode.id,\n          target: sourceId\n        };\n      }\n      return {\n        ...link\n      };\n    });\n    const zoom = d3.zoom().scaleExtent([0.1, 10]).on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    const g = svg.append(\"g\");\n    g.append(\"defs\").append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 28).attr(\"refY\", 0).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#00f2ff\");\n    const link = g.append(\"g\").selectAll(\"line\").data(directedLinks).enter().append(\"line\").attr(\"stroke-width\", 2.5).attr(\"stroke\", d => parseFloat(d.amount) > 1 ? \"#00f2ff\" : \"#ff00a1\").attr(\"stroke-dasharray\", d => parseFloat(d.amount) > 1 ? \"5,3\" : \"4,3\").attr(\"marker-end\", \"url(#arrow)\");\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(directedLinks).id(d => d.id).distance(200)).force(\"charge\", d3.forceManyBody().strength(-400)).force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n    // Invisible circle backup layer for export (SVG-safe)\n    const visibleNodes = g.append(\"g\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 28).attr(\"fill\", d => {\n      if (d.label === \"Changenow\") return \"#ff8800\";\n      if (d.label === \"Whitebit\") return \"#b794f4\";\n      if (d.label) return \"#ffb6c1\";\n      return \"#38b2ac\";\n    }).attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 2).style(\"pointer-events\", \"none\"); // So drag still works on foreignObject\n\n    const node = g.append(\"g\").selectAll(\"foreignObject\").data(nodes).enter().append(\"foreignObject\").attr(\"width\", 180).attr(\"height\", 60).attr(\"x\", -90).attr(\"y\", -30).html(d => {\n      const label = d.label || `${d.id.slice(0, 6)}...${d.id.slice(-6)}`;\n      const dateTime = d.timestamp ? `<div style=\"font-size:10px; color:#eee; margin-top:2px;\">${d.timestamp}</div>` : '';\n      return `\n          <div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"\n            background: ${d.label === \"Changenow\" ? \"#ff8800\" : d.label === \"Whitebit\" ? \"#b794f4\" : d.label ? \"#ffb6c1\" : \"#38b2ac\"};\n            border-radius: 25px;\n            padding: 6px 10px;\n            color: white;\n            text-align: center;\n            font-size: 13px;\n            font-weight: 500;\n            box-shadow: 0 0 8px rgba(255,255,255,0.5);\n            cursor: move;\n          \">\n            <div>${label}</div>\n            ${dateTime}\n          </div>\n        `;\n    }).call(drag(simulation));\n    const edgeLabels = g.append(\"g\").selectAll(\"text\").data(directedLinks).enter().append(\"text\").attr(\"fill\", \"#fff\").attr(\"font-size\", \"12px\").attr(\"font-weight\", \"bold\").attr(\"text-anchor\", \"middle\").style(\"opacity\", 1).text(d => {\n      var _d$amount;\n      const amount = parseFloat((_d$amount = d.amount) === null || _d$amount === void 0 ? void 0 : _d$amount.replace(\" BTC\", \"\"));\n      const timestamp = d.timestamp || \"\";\n      return `${amount} BTC | ${timestamp}`;\n    });\n    simulation.on(\"tick\", () => {\n      const spacingX = 350;\n      const spacingY = 200;\n      const centerX = width / 2;\n      const centerY = height / 2;\n      if (centerNode && centerNode.fx === undefined) {\n        centerNode.fx = centerX;\n        centerNode.fy = centerY;\n      }\n      inflowLinks.forEach((link, i) => {\n        const yOffset = inflowLinks.length === 1 ? -350 : (i - (inflowLinks.length - 1) / 2) * spacingY;\n        const sourceNode = typeof link.source === \"string\" ? nodes.find(n => n.id === link.source) : link.source;\n        if (sourceNode && sourceNode.fx === undefined) {\n          sourceNode.fx = centerX - spacingX;\n          sourceNode.fy = centerY + yOffset;\n        }\n      });\n      outflowLinks.forEach((link, i) => {\n        const yOffset = outflowLinks.length === 1 ? 150 : (i - (outflowLinks.length - 1) / 2) * spacingY;\n        const targetNode = typeof link.target === \"string\" ? nodes.find(n => n.id === link.target) : link.target;\n        if (targetNode && targetNode.fx === undefined) {\n          targetNode.fx = centerX + spacingX;\n          targetNode.fy = centerY + yOffset;\n        }\n      });\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"x\", d => d.x - 90).attr(\"y\", d => d.y - 30);\n      visibleNodes.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      edgeLabels.attr(\"x\", d => (d.source.x + d.target.x) / 2).attr(\"y\", d => (d.source.y + d.target.y) / 2 - 20);\n    });\n    function drag(simulation) {\n      return d3.drag().on(\"start\", event => {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        event.subject.fx = event.subject.x;\n        event.subject.fy = event.subject.y;\n      }).on(\"drag\", event => {\n        event.subject.fx = event.x;\n        event.subject.fy = event.y;\n      }).on(\"end\", event => {\n        if (!event.active) simulation.alphaTarget(0);\n      });\n    }\n    const handleDownloadSVG = () => {\n      const svgElement = svgRef.current;\n      const clone = svgElement.cloneNode(true);\n      const foreignObjects = clone.querySelectorAll(\"foreignObject\");\n      foreignObjects.forEach(el => el.parentNode.removeChild(el));\n      const serializer = new XMLSerializer();\n      const source = serializer.serializeToString(clone);\n      const blob = new Blob([source], {\n        type: \"image/svg+xml;charset=utf-8\"\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"bitcoin-graph.svg\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    };\n    window.addEventListener(\"download-svg\", handleDownloadSVG);\n    return () => window.removeEventListener(\"download-svg\", handleDownloadSVG);\n  }, [nodes, links]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    width: 1200,\n    height: 800,\n    style: {\n      backgroundColor: \"#000\",\n      backgroundImage: \"url('/graph-bg.png')\",\n      backgroundSize: \"contain\",\n      backgroundRepeat: \"no-repeat\",\n      backgroundPosition: \"center\",\n      cursor: \"grab\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","Graph","nodes","links","_s","svgRef","svg","select","current","selectAll","remove","width","height","inflowLinks","filter","link","_nodes$","_link$target","_nodes$2","target","id","outflowLinks","_nodes$3","_link$source","_nodes$4","source","centerNode","directedLinks","map","_link$source2","_link$target2","sourceId","targetId","zoom","scaleExtent","on","event","g","attr","transform","call","append","data","enter","d","parseFloat","amount","simulation","forceSimulation","force","forceLink","distance","forceManyBody","strength","forceCenter","visibleNodes","label","style","node","html","slice","dateTime","timestamp","drag","edgeLabels","text","_d$amount","replace","spacingX","spacingY","centerX","centerY","fx","undefined","fy","forEach","i","yOffset","length","sourceNode","find","n","targetNode","x","y","active","alphaTarget","restart","subject","handleDownloadSVG","svgElement","clone","cloneNode","foreignObjects","querySelectorAll","el","parentNode","removeChild","serializer","XMLSerializer","serializeToString","blob","Blob","type","url","URL","createObjectURL","document","createElement","href","download","body","appendChild","click","revokeObjectURL","window","addEventListener","removeEventListener","ref","backgroundColor","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Samri/wallet trans/wallet/src/components/Graph.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n// import { mockInflowOutflowData } from \"../data/mockData\";\n\n// const Graph = ({ nodes, links }) => {\n//   const svgRef = useRef();\n\n//   useEffect(() => {\n//     const svg = d3.select(svgRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 1200;\n//     const height = 800;\n\n//     const simulation = d3.forceSimulation(nodes)\n//       .force(\"link\", d3.forceLink(links).id(d => d.id).distance(240))\n//       .force(\"charge\", d3.forceManyBody().strength(-400))\n//       .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n//     svg.append(\"defs\").append(\"marker\")\n//       .attr(\"id\", \"arrow\")\n//       .attr(\"viewBox\", \"0 -5 10 10\")\n//       .attr(\"refX\", 36)\n//       .attr(\"refY\", 0)\n//       .attr(\"markerWidth\", 6)\n//       .attr(\"markerHeight\", 6)\n//       .attr(\"orient\", \"auto\")\n//       .append(\"path\")\n//       .attr(\"d\", \"M0,-5L10,0L0,5\")\n//       .attr(\"fill\", \"#00f2ff\");\n\n//     const link = svg.append(\"g\")\n//       .attr(\"stroke\", \"#888\")\n//       .selectAll(\"line\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"stroke-width\", 2.5)\n//       .attr(\"stroke\", d => parseFloat(d.amount) > 1 ? \"#00f2ff\" : \"#ff00a1\")\n//       .attr(\"stroke-dasharray\", d => parseFloat(d.amount) > 1 ? \"5,3\" : \"4,3\")\n//       .attr(\"marker-end\", \"url(#arrow)\");\n\n//     const node = svg.append(\"g\")\n//       .selectAll(\"foreignObject\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"foreignObject\")\n//       .attr(\"width\", 180)\n//       .attr(\"height\", 100)\n//       .attr(\"x\", -90)\n//       .attr(\"y\", -50)\n//       .html(d => {\n//         const label = d.label || `${d.id.slice(0, 6)}...${d.id.slice(-6)}`;\n\n//         let amount = \"No Data\";\n//         let date = \"No Data\";\n\n//         // const inflows = mockInflowOutflowData[d.id]?.inflows || [];\n//         // const outflows = mockInflowOutflowData[d.id]?.outflows || [];\n\n        \n//         // if (inflows.length > 0) {\n//         //   amount = `${inflows[0].amount} BTC`;\n//         //   date = inflows[0].date;\n//         // } else if (outflows.length > 0) {\n//         //   amount = `${outflows[0].amount} BTC`;\n//         //   date = outflows[0].date;\n//         // }\n        \n//         let inflows = mockInflowOutflowData[d.id]?.inflows || [];\n// let outflows = mockInflowOutflowData[d.id]?.outflows || [];\n\n// if (inflows.length === 0 && outflows.length === 0) {\n//   // Look into every nodeâ€™s inflows/outflows to find a match\n//   for (const key in mockInflowOutflowData) {\n//     const entry = mockInflowOutflowData[key];\n\n//     const inflowMatch = entry.inflows?.find(tx => tx.sender === d.id);\n//     const outflowMatch = entry.outflows?.find(tx => tx.beneficiary_address === d.id);\n\n//     if (inflowMatch) {\n//       amount = `${inflowMatch.amount} BTC`;\n//       date = inflowMatch.date;\n//       break;\n//     } else if (outflowMatch) {\n//       amount = `${outflowMatch.amount} BTC`;\n//       date = outflowMatch.date;\n//       break;\n//     }\n//   }\n// } else if (inflows.length > 0) {\n//   amount = `${inflows[0].amount} BTC`;\n//   date = inflows[0].date;\n// } else if (outflows.length > 0) {\n//   amount = `${outflows[0].amount} BTC`;\n//   date = outflows[0].date;\n// }\n\n\n//         const bgColor = d.label === \"Changenow\" ? \"#ff8800\" :\n//                         d.label === \"Whitebit\"  ? \"#b794f4\" :\n//                         d.label                 ? \"#ffb6c1\" :\n//                                                   \"#38b2ac\";\n\n//         return `\n//           <div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"\n//             background: ${bgColor};\n//             border-radius: 25px;\n//             padding: 6px 10px;\n//             color: white;\n//             text-align: center;\n//             font-size: 13px;\n//             font-weight: 500;\n//             box-shadow: 0 0 8px rgba(255,255,255,0.5);\n//             cursor: pointer;\n//             margin-bottom: 5px;\n//           \">${label}</div>\n//           <div style=\"display: flex; justify-content: space-between; margin-top: 5px;\">\n//             <div style=\"\n//               background-color: #333;\n//               color: white;\n//               padding: 5px 10px;\n//               border-radius: 12px;\n//               font-size: 10px;\n//               font-weight: 600;\n//             \">${amount} | ${date}</div>\n//             <div style=\"\n//               background-color: #333;\n//               color: white;\n//               padding: 5px 10px;\n//               border-radius: 12px;\n//               font-size: 10px;\n//               font-weight: 600;\n//             \">${d.id}</div>\n//           </div>\n//         `;\n//       });\n\n//     simulation.on(\"tick\", () => {\n//       link\n//         .attr(\"x1\", d => d.source.x)\n//         .attr(\"y1\", d => d.source.y)\n//         .attr(\"x2\", d => d.target.x)\n//         .attr(\"y2\", d => d.target.y);\n\n//       node\n//         .attr(\"x\", d => d.x - 90)\n//         .attr(\"y\", d => d.y - 50);\n//     });\n\n//   }, [nodes, links]);\n\n//   return (\n//     <svg\n//       ref={svgRef}\n//       width={1200}\n//       height={800}\n//       style={{\n//         backgroundColor: \"#000\",\n//         backgroundImage: \"url('/graph-bg.png')\",\n//         backgroundSize: \"contain\",\n//         backgroundRepeat: \"no-repeat\",\n//         backgroundPosition: \"center\"\n//       }}\n//     ></svg>\n//   );\n// };\n\n// export default Graph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst Graph = ({ nodes, links }) => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 1200;\n    const height = 800;\n\n    const inflowLinks = links.filter(\n      link => link.target === nodes[0]?.id || link.target?.id === nodes[0]?.id\n    );\n    const outflowLinks = links.filter(\n      link => link.source === nodes[0]?.id || link.source?.id === nodes[0]?.id\n    );\n    const centerNode = nodes[0];\n\n    const directedLinks = links.map(link => {\n      const sourceId = typeof link.source === \"string\" ? link.source : link.source?.id;\n      const targetId = typeof link.target === \"string\" ? link.target : link.target?.id;\n      if (sourceId === centerNode?.id) {\n        return { ...link, source: sourceId, target: targetId };\n      } else if (targetId === centerNode?.id) {\n        return { ...link, source: centerNode.id, target: sourceId };\n      }\n      return { ...link };\n    });\n\n    const zoom = d3.zoom().scaleExtent([0.1, 10]).on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n\n    svg.call(zoom);\n    const g = svg.append(\"g\");\n\n    g.append(\"defs\").append(\"marker\")\n      .attr(\"id\", \"arrow\")\n      .attr(\"viewBox\", \"0 -5 10 10\")\n      .attr(\"refX\", 28)\n      .attr(\"refY\", 0)\n      .attr(\"markerWidth\", 6)\n      .attr(\"markerHeight\", 6)\n      .attr(\"orient\", \"auto\")\n      .append(\"path\")\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\n      .attr(\"fill\", \"#00f2ff\");\n\n    const link = g.append(\"g\")\n      .selectAll(\"line\")\n      .data(directedLinks)\n      .enter()\n      .append(\"line\")\n      .attr(\"stroke-width\", 2.5)\n      .attr(\"stroke\", d => parseFloat(d.amount) > 1 ? \"#00f2ff\" : \"#ff00a1\")\n      .attr(\"stroke-dasharray\", d => parseFloat(d.amount) > 1 ? \"5,3\" : \"4,3\")\n      .attr(\"marker-end\", \"url(#arrow)\");\n\n    const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", d3.forceLink(directedLinks).id(d => d.id).distance(200))\n      .force(\"charge\", d3.forceManyBody().strength(-400))\n      .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n    // Invisible circle backup layer for export (SVG-safe)\n    const visibleNodes = g.append(\"g\")\n      .selectAll(\"circle\")\n      .data(nodes)\n      .enter()\n      .append(\"circle\")\n      .attr(\"r\", 28)\n      .attr(\"fill\", d => {\n        if (d.label === \"Changenow\") return \"#ff8800\";\n        if (d.label === \"Whitebit\") return \"#b794f4\";\n        if (d.label) return \"#ffb6c1\";\n        return \"#38b2ac\";\n      })\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 2)\n      .style(\"pointer-events\", \"none\"); // So drag still works on foreignObject\n\n    const node = g.append(\"g\")\n      .selectAll(\"foreignObject\")\n      .data(nodes)\n      .enter()\n      .append(\"foreignObject\")\n      .attr(\"width\", 180)\n      .attr(\"height\", 60)\n      .attr(\"x\", -90)\n      .attr(\"y\", -30)\n      .html(d => {\n        const label = d.label || `${d.id.slice(0, 6)}...${d.id.slice(-6)}`;\n        const dateTime = d.timestamp\n          ? `<div style=\"font-size:10px; color:#eee; margin-top:2px;\">${d.timestamp}</div>`\n          : '';\n        return `\n          <div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"\n            background: ${d.label === \"Changenow\" ? \"#ff8800\" : d.label === \"Whitebit\" ? \"#b794f4\" : d.label ? \"#ffb6c1\" : \"#38b2ac\"};\n            border-radius: 25px;\n            padding: 6px 10px;\n            color: white;\n            text-align: center;\n            font-size: 13px;\n            font-weight: 500;\n            box-shadow: 0 0 8px rgba(255,255,255,0.5);\n            cursor: move;\n          \">\n            <div>${label}</div>\n            ${dateTime}\n          </div>\n        `;\n      })\n      .call(drag(simulation));\n\n    const edgeLabels = g.append(\"g\")\n      .selectAll(\"text\")\n      .data(directedLinks)\n      .enter()\n      .append(\"text\")\n      .attr(\"fill\", \"#fff\")\n      .attr(\"font-size\", \"12px\")\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"opacity\", 1)\n      .text(d => {\n        const amount = parseFloat(d.amount?.replace(\" BTC\", \"\"));\n        const timestamp = d.timestamp || \"\";\n        return `${amount} BTC | ${timestamp}`;\n      });\n\n    simulation.on(\"tick\", () => {\n      const spacingX = 350;\n      const spacingY = 200;\n      const centerX = width / 2;\n      const centerY = height / 2;\n\n      if (centerNode && centerNode.fx === undefined) {\n        centerNode.fx = centerX;\n        centerNode.fy = centerY;\n      }\n\n      inflowLinks.forEach((link, i) => {\n        const yOffset = inflowLinks.length === 1\n          ? -350\n          : (i - (inflowLinks.length - 1) / 2) * spacingY;\n\n        const sourceNode = typeof link.source === \"string\"\n          ? nodes.find(n => n.id === link.source)\n          : link.source;\n\n        if (sourceNode && sourceNode.fx === undefined) {\n          sourceNode.fx = centerX - spacingX;\n          sourceNode.fy = centerY + yOffset;\n        }\n      });\n\n      outflowLinks.forEach((link, i) => {\n        const yOffset = outflowLinks.length === 1\n          ? 150\n          : (i - (outflowLinks.length - 1) / 2) * spacingY;\n\n        const targetNode = typeof link.target === \"string\"\n          ? nodes.find(n => n.id === link.target)\n          : link.target;\n\n        if (targetNode && targetNode.fx === undefined) {\n          targetNode.fx = centerX + spacingX;\n          targetNode.fy = centerY + yOffset;\n        }\n      });\n\n      link\n        .attr(\"x1\", d => d.source.x)\n        .attr(\"y1\", d => d.source.y)\n        .attr(\"x2\", d => d.target.x)\n        .attr(\"y2\", d => d.target.y);\n\n      node\n        .attr(\"x\", d => d.x - 90)\n        .attr(\"y\", d => d.y - 30);\n\n      visibleNodes\n        .attr(\"cx\", d => d.x)\n        .attr(\"cy\", d => d.y);\n\n      edgeLabels\n        .attr(\"x\", d => (d.source.x + d.target.x) / 2)\n        .attr(\"y\", d => (d.source.y + d.target.y) / 2 - 20);\n    });\n\n    function drag(simulation) {\n      return d3.drag()\n        .on(\"start\", event => {\n          if (!event.active) simulation.alphaTarget(0.3).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        })\n        .on(\"drag\", event => {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        })\n        .on(\"end\", event => {\n          if (!event.active) simulation.alphaTarget(0);\n        });\n    }\n\n    const handleDownloadSVG = () => {\n      const svgElement = svgRef.current;\n      const clone = svgElement.cloneNode(true);\n\n      const foreignObjects = clone.querySelectorAll(\"foreignObject\");\n      foreignObjects.forEach(el => el.parentNode.removeChild(el));\n\n      const serializer = new XMLSerializer();\n      const source = serializer.serializeToString(clone);\n\n      const blob = new Blob([source], { type: \"image/svg+xml;charset=utf-8\" });\n      const url = URL.createObjectURL(blob);\n\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"bitcoin-graph.svg\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    };\n\n    window.addEventListener(\"download-svg\", handleDownloadSVG);\n    return () => window.removeEventListener(\"download-svg\", handleDownloadSVG);\n  }, [nodes, links]);\n\n  return (\n    <svg\n      ref={svgRef}\n      width={1200}\n      height={800}\n      style={{\n        backgroundColor: \"#000\",\n        backgroundImage: \"url('/graph-bg.png')\",\n        backgroundSize: \"contain\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundPosition: \"center\",\n        cursor: \"grab\"\n      }}\n    />\n  );\n};\n\nexport default Graph;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,KAAK,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAMC,MAAM,GAAGR,MAAM,CAAC,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd,MAAMU,GAAG,GAAGR,EAAE,CAACS,MAAM,CAACF,MAAM,CAACG,OAAO,CAAC;IACrCF,GAAG,CAACG,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;IAE3B,MAAMC,KAAK,GAAG,IAAI;IAClB,MAAMC,MAAM,GAAG,GAAG;IAElB,MAAMC,WAAW,GAAGV,KAAK,CAACW,MAAM,CAC9BC,IAAI;MAAA,IAAAC,OAAA,EAAAC,YAAA,EAAAC,QAAA;MAAA,OAAIH,IAAI,CAACI,MAAM,OAAAH,OAAA,GAAKd,KAAK,CAAC,CAAC,CAAC,cAAAc,OAAA,uBAARA,OAAA,CAAUI,EAAE,KAAI,EAAAH,YAAA,GAAAF,IAAI,CAACI,MAAM,cAAAF,YAAA,uBAAXA,YAAA,CAAaG,EAAE,QAAAF,QAAA,GAAKhB,KAAK,CAAC,CAAC,CAAC,cAAAgB,QAAA,uBAARA,QAAA,CAAUE,EAAE;IAAA,CAC1E,CAAC;IACD,MAAMC,YAAY,GAAGlB,KAAK,CAACW,MAAM,CAC/BC,IAAI;MAAA,IAAAO,QAAA,EAAAC,YAAA,EAAAC,QAAA;MAAA,OAAIT,IAAI,CAACU,MAAM,OAAAH,QAAA,GAAKpB,KAAK,CAAC,CAAC,CAAC,cAAAoB,QAAA,uBAARA,QAAA,CAAUF,EAAE,KAAI,EAAAG,YAAA,GAAAR,IAAI,CAACU,MAAM,cAAAF,YAAA,uBAAXA,YAAA,CAAaH,EAAE,QAAAI,QAAA,GAAKtB,KAAK,CAAC,CAAC,CAAC,cAAAsB,QAAA,uBAARA,QAAA,CAAUJ,EAAE;IAAA,CAC1E,CAAC;IACD,MAAMM,UAAU,GAAGxB,KAAK,CAAC,CAAC,CAAC;IAE3B,MAAMyB,aAAa,GAAGxB,KAAK,CAACyB,GAAG,CAACb,IAAI,IAAI;MAAA,IAAAc,aAAA,EAAAC,aAAA;MACtC,MAAMC,QAAQ,GAAG,OAAOhB,IAAI,CAACU,MAAM,KAAK,QAAQ,GAAGV,IAAI,CAACU,MAAM,IAAAI,aAAA,GAAGd,IAAI,CAACU,MAAM,cAAAI,aAAA,uBAAXA,aAAA,CAAaT,EAAE;MAChF,MAAMY,QAAQ,GAAG,OAAOjB,IAAI,CAACI,MAAM,KAAK,QAAQ,GAAGJ,IAAI,CAACI,MAAM,IAAAW,aAAA,GAAGf,IAAI,CAACI,MAAM,cAAAW,aAAA,uBAAXA,aAAA,CAAaV,EAAE;MAChF,IAAIW,QAAQ,MAAKL,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEN,EAAE,GAAE;QAC/B,OAAO;UAAE,GAAGL,IAAI;UAAEU,MAAM,EAAEM,QAAQ;UAAEZ,MAAM,EAAEa;QAAS,CAAC;MACxD,CAAC,MAAM,IAAIA,QAAQ,MAAKN,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEN,EAAE,GAAE;QACtC,OAAO;UAAE,GAAGL,IAAI;UAAEU,MAAM,EAAEC,UAAU,CAACN,EAAE;UAAED,MAAM,EAAEY;QAAS,CAAC;MAC7D;MACA,OAAO;QAAE,GAAGhB;MAAK,CAAC;IACpB,CAAC,CAAC;IAEF,MAAMkB,IAAI,GAAGnC,EAAE,CAACmC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAACC,EAAE,CAAC,MAAM,EAAGC,KAAK,IAAK;MAClEC,CAAC,CAACC,IAAI,CAAC,WAAW,EAAEF,KAAK,CAACG,SAAS,CAAC;IACtC,CAAC,CAAC;IAEFjC,GAAG,CAACkC,IAAI,CAACP,IAAI,CAAC;IACd,MAAMI,CAAC,GAAG/B,GAAG,CAACmC,MAAM,CAAC,GAAG,CAAC;IAEzBJ,CAAC,CAACI,MAAM,CAAC,MAAM,CAAC,CAACA,MAAM,CAAC,QAAQ,CAAC,CAC9BH,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CACnBA,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAC7BA,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAChBA,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CACfA,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CACtBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CACtBG,MAAM,CAAC,MAAM,CAAC,CACdH,IAAI,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAC3BA,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC;IAE1B,MAAMvB,IAAI,GAAGsB,CAAC,CAACI,MAAM,CAAC,GAAG,CAAC,CACvBhC,SAAS,CAAC,MAAM,CAAC,CACjBiC,IAAI,CAACf,aAAa,CAAC,CACnBgB,KAAK,CAAC,CAAC,CACPF,MAAM,CAAC,MAAM,CAAC,CACdH,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,QAAQ,EAAEM,CAAC,IAAIC,UAAU,CAACD,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,GAAG,SAAS,CAAC,CACrER,IAAI,CAAC,kBAAkB,EAAEM,CAAC,IAAIC,UAAU,CAACD,CAAC,CAACE,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC,CACvER,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC;IAEpC,MAAMS,UAAU,GAAGjD,EAAE,CAACkD,eAAe,CAAC9C,KAAK,CAAC,CACzC+C,KAAK,CAAC,MAAM,EAAEnD,EAAE,CAACoD,SAAS,CAACvB,aAAa,CAAC,CAACP,EAAE,CAACwB,CAAC,IAAIA,CAAC,CAACxB,EAAE,CAAC,CAAC+B,QAAQ,CAAC,GAAG,CAAC,CAAC,CACtEF,KAAK,CAAC,QAAQ,EAAEnD,EAAE,CAACsD,aAAa,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAClDJ,KAAK,CAAC,QAAQ,EAAEnD,EAAE,CAACwD,WAAW,CAAC3C,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,CAAC,CAAC;;IAEzD;IACA,MAAM2C,YAAY,GAAGlB,CAAC,CAACI,MAAM,CAAC,GAAG,CAAC,CAC/BhC,SAAS,CAAC,QAAQ,CAAC,CACnBiC,IAAI,CAACxC,KAAK,CAAC,CACXyC,KAAK,CAAC,CAAC,CACPF,MAAM,CAAC,QAAQ,CAAC,CAChBH,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,MAAM,EAAEM,CAAC,IAAI;MACjB,IAAIA,CAAC,CAACY,KAAK,KAAK,WAAW,EAAE,OAAO,SAAS;MAC7C,IAAIZ,CAAC,CAACY,KAAK,KAAK,UAAU,EAAE,OAAO,SAAS;MAC5C,IAAIZ,CAAC,CAACY,KAAK,EAAE,OAAO,SAAS;MAC7B,OAAO,SAAS;IAClB,CAAC,CAAC,CACDlB,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CACtBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBmB,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAC;;IAEpC,MAAMC,IAAI,GAAGrB,CAAC,CAACI,MAAM,CAAC,GAAG,CAAC,CACvBhC,SAAS,CAAC,eAAe,CAAC,CAC1BiC,IAAI,CAACxC,KAAK,CAAC,CACXyC,KAAK,CAAC,CAAC,CACPF,MAAM,CAAC,eAAe,CAAC,CACvBH,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAClBA,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAClBA,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CACdA,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CACdqB,IAAI,CAACf,CAAC,IAAI;MACT,MAAMY,KAAK,GAAGZ,CAAC,CAACY,KAAK,IAAI,GAAGZ,CAAC,CAACxB,EAAE,CAACwC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,MAAMhB,CAAC,CAACxB,EAAE,CAACwC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MAClE,MAAMC,QAAQ,GAAGjB,CAAC,CAACkB,SAAS,GACxB,4DAA4DlB,CAAC,CAACkB,SAAS,QAAQ,GAC/E,EAAE;MACN,OAAO;AACf;AACA,0BAA0BlB,CAAC,CAACY,KAAK,KAAK,WAAW,GAAG,SAAS,GAAGZ,CAAC,CAACY,KAAK,KAAK,UAAU,GAAG,SAAS,GAAGZ,CAAC,CAACY,KAAK,GAAG,SAAS,GAAG,SAAS;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmBA,KAAK;AACxB,cAAcK,QAAQ;AACtB;AACA,SAAS;IACH,CAAC,CAAC,CACDrB,IAAI,CAACuB,IAAI,CAAChB,UAAU,CAAC,CAAC;IAEzB,MAAMiB,UAAU,GAAG3B,CAAC,CAACI,MAAM,CAAC,GAAG,CAAC,CAC7BhC,SAAS,CAAC,MAAM,CAAC,CACjBiC,IAAI,CAACf,aAAa,CAAC,CACnBgB,KAAK,CAAC,CAAC,CACPF,MAAM,CAAC,MAAM,CAAC,CACdH,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBA,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAC3BA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BmB,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnBQ,IAAI,CAACrB,CAAC,IAAI;MAAA,IAAAsB,SAAA;MACT,MAAMpB,MAAM,GAAGD,UAAU,EAAAqB,SAAA,GAACtB,CAAC,CAACE,MAAM,cAAAoB,SAAA,uBAARA,SAAA,CAAUC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;MACxD,MAAML,SAAS,GAAGlB,CAAC,CAACkB,SAAS,IAAI,EAAE;MACnC,OAAO,GAAGhB,MAAM,UAAUgB,SAAS,EAAE;IACvC,CAAC,CAAC;IAEJf,UAAU,CAACZ,EAAE,CAAC,MAAM,EAAE,MAAM;MAC1B,MAAMiC,QAAQ,GAAG,GAAG;MACpB,MAAMC,QAAQ,GAAG,GAAG;MACpB,MAAMC,OAAO,GAAG3D,KAAK,GAAG,CAAC;MACzB,MAAM4D,OAAO,GAAG3D,MAAM,GAAG,CAAC;MAE1B,IAAIc,UAAU,IAAIA,UAAU,CAAC8C,EAAE,KAAKC,SAAS,EAAE;QAC7C/C,UAAU,CAAC8C,EAAE,GAAGF,OAAO;QACvB5C,UAAU,CAACgD,EAAE,GAAGH,OAAO;MACzB;MAEA1D,WAAW,CAAC8D,OAAO,CAAC,CAAC5D,IAAI,EAAE6D,CAAC,KAAK;QAC/B,MAAMC,OAAO,GAAGhE,WAAW,CAACiE,MAAM,KAAK,CAAC,GACpC,CAAC,GAAG,GACJ,CAACF,CAAC,GAAG,CAAC/D,WAAW,CAACiE,MAAM,GAAG,CAAC,IAAI,CAAC,IAAIT,QAAQ;QAEjD,MAAMU,UAAU,GAAG,OAAOhE,IAAI,CAACU,MAAM,KAAK,QAAQ,GAC9CvB,KAAK,CAAC8E,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC7D,EAAE,KAAKL,IAAI,CAACU,MAAM,CAAC,GACrCV,IAAI,CAACU,MAAM;QAEf,IAAIsD,UAAU,IAAIA,UAAU,CAACP,EAAE,KAAKC,SAAS,EAAE;UAC7CM,UAAU,CAACP,EAAE,GAAGF,OAAO,GAAGF,QAAQ;UAClCW,UAAU,CAACL,EAAE,GAAGH,OAAO,GAAGM,OAAO;QACnC;MACF,CAAC,CAAC;MAEFxD,YAAY,CAACsD,OAAO,CAAC,CAAC5D,IAAI,EAAE6D,CAAC,KAAK;QAChC,MAAMC,OAAO,GAAGxD,YAAY,CAACyD,MAAM,KAAK,CAAC,GACrC,GAAG,GACH,CAACF,CAAC,GAAG,CAACvD,YAAY,CAACyD,MAAM,GAAG,CAAC,IAAI,CAAC,IAAIT,QAAQ;QAElD,MAAMa,UAAU,GAAG,OAAOnE,IAAI,CAACI,MAAM,KAAK,QAAQ,GAC9CjB,KAAK,CAAC8E,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC7D,EAAE,KAAKL,IAAI,CAACI,MAAM,CAAC,GACrCJ,IAAI,CAACI,MAAM;QAEf,IAAI+D,UAAU,IAAIA,UAAU,CAACV,EAAE,KAAKC,SAAS,EAAE;UAC7CS,UAAU,CAACV,EAAE,GAAGF,OAAO,GAAGF,QAAQ;UAClCc,UAAU,CAACR,EAAE,GAAGH,OAAO,GAAGM,OAAO;QACnC;MACF,CAAC,CAAC;MAEF9D,IAAI,CACDuB,IAAI,CAAC,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACnB,MAAM,CAAC0D,CAAC,CAAC,CAC3B7C,IAAI,CAAC,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACnB,MAAM,CAAC2D,CAAC,CAAC,CAC3B9C,IAAI,CAAC,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACzB,MAAM,CAACgE,CAAC,CAAC,CAC3B7C,IAAI,CAAC,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACzB,MAAM,CAACiE,CAAC,CAAC;MAE9B1B,IAAI,CACDpB,IAAI,CAAC,GAAG,EAAEM,CAAC,IAAIA,CAAC,CAACuC,CAAC,GAAG,EAAE,CAAC,CACxB7C,IAAI,CAAC,GAAG,EAAEM,CAAC,IAAIA,CAAC,CAACwC,CAAC,GAAG,EAAE,CAAC;MAE3B7B,YAAY,CACTjB,IAAI,CAAC,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACuC,CAAC,CAAC,CACpB7C,IAAI,CAAC,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACwC,CAAC,CAAC;MAEvBpB,UAAU,CACP1B,IAAI,CAAC,GAAG,EAAEM,CAAC,IAAI,CAACA,CAAC,CAACnB,MAAM,CAAC0D,CAAC,GAAGvC,CAAC,CAACzB,MAAM,CAACgE,CAAC,IAAI,CAAC,CAAC,CAC7C7C,IAAI,CAAC,GAAG,EAAEM,CAAC,IAAI,CAACA,CAAC,CAACnB,MAAM,CAAC2D,CAAC,GAAGxC,CAAC,CAACzB,MAAM,CAACiE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;IACvD,CAAC,CAAC;IAEF,SAASrB,IAAIA,CAAChB,UAAU,EAAE;MACxB,OAAOjD,EAAE,CAACiE,IAAI,CAAC,CAAC,CACb5B,EAAE,CAAC,OAAO,EAAEC,KAAK,IAAI;QACpB,IAAI,CAACA,KAAK,CAACiD,MAAM,EAAEtC,UAAU,CAACuC,WAAW,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,CAAC;QACxDnD,KAAK,CAACoD,OAAO,CAAChB,EAAE,GAAGpC,KAAK,CAACoD,OAAO,CAACL,CAAC;QAClC/C,KAAK,CAACoD,OAAO,CAACd,EAAE,GAAGtC,KAAK,CAACoD,OAAO,CAACJ,CAAC;MACpC,CAAC,CAAC,CACDjD,EAAE,CAAC,MAAM,EAAEC,KAAK,IAAI;QACnBA,KAAK,CAACoD,OAAO,CAAChB,EAAE,GAAGpC,KAAK,CAAC+C,CAAC;QAC1B/C,KAAK,CAACoD,OAAO,CAACd,EAAE,GAAGtC,KAAK,CAACgD,CAAC;MAC5B,CAAC,CAAC,CACDjD,EAAE,CAAC,KAAK,EAAEC,KAAK,IAAI;QAClB,IAAI,CAACA,KAAK,CAACiD,MAAM,EAAEtC,UAAU,CAACuC,WAAW,CAAC,CAAC,CAAC;MAC9C,CAAC,CAAC;IACN;IAEA,MAAMG,iBAAiB,GAAGA,CAAA,KAAM;MAC9B,MAAMC,UAAU,GAAGrF,MAAM,CAACG,OAAO;MACjC,MAAMmF,KAAK,GAAGD,UAAU,CAACE,SAAS,CAAC,IAAI,CAAC;MAExC,MAAMC,cAAc,GAAGF,KAAK,CAACG,gBAAgB,CAAC,eAAe,CAAC;MAC9DD,cAAc,CAAClB,OAAO,CAACoB,EAAE,IAAIA,EAAE,CAACC,UAAU,CAACC,WAAW,CAACF,EAAE,CAAC,CAAC;MAE3D,MAAMG,UAAU,GAAG,IAAIC,aAAa,CAAC,CAAC;MACtC,MAAM1E,MAAM,GAAGyE,UAAU,CAACE,iBAAiB,CAACT,KAAK,CAAC;MAElD,MAAMU,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC7E,MAAM,CAAC,EAAE;QAAE8E,IAAI,EAAE;MAA8B,CAAC,CAAC;MACxE,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;MAErC,MAAMtF,IAAI,GAAG4F,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxC7F,IAAI,CAAC8F,IAAI,GAAGL,GAAG;MACfzF,IAAI,CAAC+F,QAAQ,GAAG,mBAAmB;MACnCH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACjG,IAAI,CAAC;MAC/BA,IAAI,CAACkG,KAAK,CAAC,CAAC;MACZN,QAAQ,CAACI,IAAI,CAACd,WAAW,CAAClF,IAAI,CAAC;MAC/B0F,GAAG,CAACS,eAAe,CAACV,GAAG,CAAC;IAC1B,CAAC;IAEDW,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAE3B,iBAAiB,CAAC;IAC1D,OAAO,MAAM0B,MAAM,CAACE,mBAAmB,CAAC,cAAc,EAAE5B,iBAAiB,CAAC;EAC5E,CAAC,EAAE,CAACvF,KAAK,EAAEC,KAAK,CAAC,CAAC;EAElB,oBACEH,OAAA;IACEsH,GAAG,EAAEjH,MAAO;IACZM,KAAK,EAAE,IAAK;IACZC,MAAM,EAAE,GAAI;IACZ6C,KAAK,EAAE;MACL8D,eAAe,EAAE,MAAM;MACvBC,eAAe,EAAE,sBAAsB;MACvCC,cAAc,EAAE,SAAS;MACzBC,gBAAgB,EAAE,WAAW;MAC7BC,kBAAkB,EAAE,QAAQ;MAC5BC,MAAM,EAAE;IACV;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAAC5H,EAAA,CAtPIH,KAAK;AAAAgI,EAAA,GAALhI,KAAK;AAwPX,eAAeA,KAAK;AAAC,IAAAgI,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}