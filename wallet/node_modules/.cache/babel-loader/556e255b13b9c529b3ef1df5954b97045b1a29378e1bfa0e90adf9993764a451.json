{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samri\\\\wallet trans\\\\wallet\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Graph from \"./components/Graph\";\nimport Sidebar from \"./components/Sidebar\";\nimport { mockInflowOutflowData } from \"./data/mockData\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [searchAddress, setSearchAddress] = useState(\"\");\n  const [selectedAddress, setSelectedAddress] = useState(null);\n  const [graphNodes, setGraphNodes] = useState([]);\n  const [graphLinks, setGraphLinks] = useState([]);\n  const [addedNodes, setAddedNodes] = useState([]);\n  const handleSearch = () => {\n    if (!mockInflowOutflowData[searchAddress]) return;\n    const baseNode = {\n      id: searchAddress\n    };\n    setGraphNodes([baseNode]);\n    setGraphLinks([]);\n    setSelectedAddress(searchAddress);\n    setAddedNodes([]);\n  };\n  const handleToggleNode = (address, type) => {\n    const data = mockInflowOutflowData[selectedAddress];\n    const existing = addedNodes.includes(address);\n    if (existing) {\n      setGraphNodes(prev => prev.filter(n => n.id !== address));\n      setGraphLinks(prev => prev.filter(l => (typeof l.source === \"string\" ? l.source : l.source.id) !== address && (typeof l.target === \"string\" ? l.target : l.target.id) !== address));\n      setAddedNodes(prev => prev.filter(a => a !== address));\n    } else {\n      const tx = [...(data.inflows || []), ...(data.outflows || [])].find(tx => tx.address === address);\n      const label = (tx === null || tx === void 0 ? void 0 : tx.label) || null;\n      setGraphNodes(prev => [...prev, {\n        id: address,\n        label\n      }]);\n      setGraphLinks(prev => [...prev, {\n        source: type === \"inflow\" ? address : selectedAddress,\n        target: type === \"inflow\" ? selectedAddress : address,\n        amount: tx.amount,\n        timestamp: tx.timestamp\n      }]);\n      setAddedNodes(prev => [...prev, address]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"topbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter address\",\n        value: searchAddress,\n        onChange: e => setSearchAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.dispatchEvent(new Event(\"download-svg\")),\n        children: \"Download SVG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        selectedAddress: selectedAddress,\n        data: mockInflowOutflowData[selectedAddress],\n        onToggleNode: handleToggleNode,\n        addedNodes: addedNodes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Graph, {\n        nodes: graphNodes,\n        links: graphLinks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"SJeSOeAj+gTkty5wkcsysQEdpFQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Graph","Sidebar","mockInflowOutflowData","jsxDEV","_jsxDEV","App","_s","searchAddress","setSearchAddress","selectedAddress","setSelectedAddress","graphNodes","setGraphNodes","graphLinks","setGraphLinks","addedNodes","setAddedNodes","handleSearch","baseNode","id","handleToggleNode","address","type","data","existing","includes","prev","filter","n","l","source","target","a","tx","inflows","outflows","find","label","amount","timestamp","className","children","placeholder","value","onChange","e","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","dispatchEvent","Event","onToggleNode","nodes","links","_c","$RefreshReg$"],"sources":["C:/Users/Samri/wallet trans/wallet/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Graph from \"./components/Graph\";\nimport Sidebar from \"./components/Sidebar\";\nimport { mockInflowOutflowData } from \"./data/mockData\";\nimport \"./styles.css\";\n\nconst App = () => {\n  const [searchAddress, setSearchAddress] = useState(\"\");\n  const [selectedAddress, setSelectedAddress] = useState(null);\n  const [graphNodes, setGraphNodes] = useState([]);\n  const [graphLinks, setGraphLinks] = useState([]);\n  const [addedNodes, setAddedNodes] = useState([]);\n\n  const handleSearch = () => {\n    if (!mockInflowOutflowData[searchAddress]) return;\n    const baseNode = { id: searchAddress };\n    setGraphNodes([baseNode]);\n    setGraphLinks([]);\n    setSelectedAddress(searchAddress);\n    setAddedNodes([]);\n  };\n\n  const handleToggleNode = (address, type) => {\n    const data = mockInflowOutflowData[selectedAddress];\n    const existing = addedNodes.includes(address);\n\n    if (existing) {\n      setGraphNodes(prev => prev.filter(n => n.id !== address));\n      setGraphLinks(prev =>\n        prev.filter(\n          l =>\n            (typeof l.source === \"string\" ? l.source : l.source.id) !== address &&\n            (typeof l.target === \"string\" ? l.target : l.target.id) !== address\n        )\n      );\n      setAddedNodes(prev => prev.filter(a => a !== address));\n    } else {\n      const tx = [...(data.inflows || []), ...(data.outflows || [])].find(tx => tx.address === address);\n      const label = tx?.label || null;\n      setGraphNodes(prev => [...prev, { id: address, label }]);\n      setGraphLinks(prev => [\n        ...prev,\n        {\n          source: type === \"inflow\" ? address : selectedAddress,\n          target: type === \"inflow\" ? selectedAddress : address,\n          amount: tx.amount,\n          timestamp: tx.timestamp,\n        },\n      ]);\n      setAddedNodes(prev => [...prev, address]);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"topbar\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter address\"\n          value={searchAddress}\n          onChange={(e) => setSearchAddress(e.target.value)}\n        />\n        <button onClick={handleSearch}>Search</button>\n        <button onClick={() => window.dispatchEvent(new Event(\"download-svg\"))}>\n          Download SVG\n        </button>\n      </div>\n\n      <div className=\"content\">\n        <Sidebar\n          selectedAddress={selectedAddress}\n          data={mockInflowOutflowData[selectedAddress]}\n          onToggleNode={handleToggleNode}\n          addedNodes={addedNodes}\n        />\n        <Graph nodes={graphNodes} links={graphLinks} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}